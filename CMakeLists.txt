CMAKE_MINIMUM_REQUIRED( VERSION 2.4 )
PROJECT( "haruna" )


# Global Setup
ADD_DEFINITIONS( /D_USE_MATH_DEFINES )
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}" )

# GLEW
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/glew/include" )
LINK_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/glew/lib" )

# GLFW
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/glfw/include" )
LINK_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/glfw/lib-msvc110" )

# GLM
ADD_SUBDIRECTORY( "${CMAKE_CURRENT_LIST_DIR}/glm/glm" )
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/glm" )

# LOKI
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/loki" )

# ZLIB
INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/zlib/include" )
LINK_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/zlib/lib" )

MACRO( MSVC_SET_PCH SourcesVar PrecompiledHeader PrecompiledSource)
  IF( !MSVC )
    GET_FILENAME_COMPONENT(PrecompiledBasename
      ${PrecompiledHeader} NAME_WE)
    SET(PrecompiledBinary "${CMAKE_CURRENT_BINARY_DIR}/${PrecompiledBasename}.pch")
    SET(Sources ${${SourcesVar}})

    SET_SOURCE_FILES_PROPERTIES(${PrecompiledHeader}
      PROPERTIES
        COMPILE_FLAGS
          "/Yc\"${PrecompiledHeader}\" /Fp\"${PrecompiledBinary}\""
        OBJECT_OUTPUTS "${PrecompiledBinary}")
    SET_SOURCE_FILES_PROPERTIES(${PrecompiledSource}
      PROPERTIES
        COMPILE_FLAGS
          "/Yu\"${PrecompiledBinary}\" /FI\"${PrecompiledBinary}\" /Fp\"${PrecompiledBinary}\""
        OBJECT_DEPENDS
          "${PrecompiledBinary}")  
  ENDIF( !MSVC )

  # Add precompiled header to SourcesVar
  LIST(APPEND ${SourcesVar} ${PrecompiledSource} ${PrecompiledHeader})
ENDMACRO( MSVC_SET_PCH )

# Haruna library
FUNCTION( ADD_HARUNA_LIBRARY )

  FILE( GLOB HARUNA_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/haruna/*.*" )
  FILE( GLOB HARUNA_GL_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/haruna/gl/*.*" )
  FILE( GLOB HARUNA_SORA_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/sora/*.*" )
  FILE( GLOB HARUNA_SORA_IO_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/sora/io/*.*" )
  FILE( GLOB HARUNA_MINIZIP_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/minizip/*.*" )
  MSVC_SET_PCH( HARUNA_SUPPORT_SRC_FILES
    "${CMAKE_CURRENT_LIST_DIR}/stdafx.h"
    "${CMAKE_CURRENT_LIST_DIR}/stdafx.cpp")

  LIST( APPEND SRC_FILES
    ${HARUNA_SRC_FILES}
    ${HARUNA_GL_SRC_FILES}
    ${HARUNA_SORA_SRC_FILES}
    ${HARUNA_SORA_IO_SRC_FILES}
    ${HARUNA_SUPPORT_SRC_FILES}
    ${HARUNA_MINIZIP_SRC_FILES})

  ADD_LIBRARY( haruna ${SRC_FILES} )

  TARGET_LINK_LIBRARIES( haruna
    GLFW
    glew32
    opengl32
    zdll)

  SOURCE_GROUP( haruna FILES ${HARUNA_SRC_FILES} )
  SOURCE_GROUP( haruna\\gl FILES ${HARUNA_GL_SRC_FILES} )
  SOURCE_GROUP( sora FILES ${HARUNA_SORA_SRC_FILES} )
  SOURCE_GROUP( sora\\io FILES ${HARUNA_SORA_IO_SRC_FILES} )
  SOURCE_GROUP( minizip FILES ${HARUNA_MINIZIP_SRC_FILES} )
  SOURCE_GROUP( support FILES ${HARUNA_SUPPORT_SRC_FILES} )

ENDFUNCTION( ADD_HARUNA_LIBRARY)


# Haruna executable example
FUNCTION( ADD_HARUNA_EXE )
  SET( CUR_ROOT "${CMAKE_SOURCE_DIR}/haruna_exe" )
  INCLUDE_DIRECTORIES( "${CUR_ROOT}" )

  FILE( GLOB HARUNA_EXE_EXAMPLE_SRC_FILES
    "${CUR_ROOT}/*.*" )
  SET( HARUNA_EXE_SUPPORT_SRC_FILES
    "${CUR_ROOT}/main.cpp"
    "${CUR_ROOT}/demo.cpp"
    "${CUR_ROOT}/demo.h")
  MSVC_SET_PCH( HARUNA_EXE_SUPPORT_SRC_FILES 
    "${CUR_ROOT}/exe_stdafx.h"
    "${CUR_ROOT}/exe_stdafx.cpp")
  LIST( REMOVE_ITEM HARUNA_EXE_EXAMPLE_SRC_FILES ${HARUNA_EXE_SUPPORT_SRC_FILES} )

  LIST( APPEND HARUNA_EXE_SRC_FILES
    ${HARUNA_EXE_EXAMPLE_SRC_FILES}
    ${HARUNA_EXE_SUPPORT_SRC_FILES})

  ADD_EXECUTABLE( haruna_exe ${HARUNA_EXE_SRC_FILES} )
 
  TARGET_LINK_LIBRARIES( haruna_exe haruna )

  ADD_DEPENDENCIES( haruna_exe haruna )

  SOURCE_GROUP( example FILES ${HARUNA_EXE_EXAMPLE_SRC_FILES} )
  SOURCE_GROUP( support FILES ${HARUNA_EXE_SUPPORT_SRC_FILES} )

ENDFUNCTION( ADD_HARUNA_EXE )

# Haruna Unit Test
FUNCTION( ADD_HARUNA_TEST )
  # GTEST
  INCLUDE_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/gtest/include" )
  LINK_DIRECTORIES( "${CMAKE_CURRENT_LIST_DIR}/gtest/lib" )

  SET( CUR_ROOT "${CMAKE_SOURCE_DIR}/haruna_test" )
  INCLUDE_DIRECTORIES( "${CUR_ROOT}" )
  
  FILE( GLOB HARUNA_TEST_SUPPORT_SRC_FILES
    "${CUR_ROOT}/test_main.cpp" )
  MSVC_SET_PCH( HARUNA_TEST_SUPPORT_SRC_FILES
    "${CUR_ROOT}/test_stdafx.h"
    "${CUR_ROOT}/test_stdafx.cpp")
  FILE( GLOB HARUNA_TEST_HARUNA_SRC_FILES
    "${CUR_ROOT}/haruna/*.*" )
  FILE( GLOB HARUNA_TEST_HARUNA_GL_SRC_FILES
    "${CUR_ROOT}/haruna/gl/*.*" )
  FILE( GLOB HARUNA_TEST_SORA_SRC_FILES
    "${CUR_ROOT}/sora/*.*" )

  LIST( APPEND HARUNA_TEST_SRC_FILES
    ${HARUNA_TEST_HARUNA_SRC_FILES}
    ${HARUNA_TEST_HARUNA_GL_SRC_FILES}
    ${HARUNA_TEST_SORA_SRC_FILES}
    ${HARUNA_TEST_SUPPORT_SRC_FILES})
  
  ADD_EXECUTABLE( haruna_test ${HARUNA_TEST_SRC_FILES} )

  TARGET_LINK_LIBRARIES( haruna_test
    gtestd )

  TARGET_LINK_LIBRARIES( haruna_test
    haruna )

  ADD_DEPENDENCIES( haruna_test haruna )

  SOURCE_GROUP( haruna FILES ${HARUNA_TEST_HARUNA_SRC_FILES} )
  SOURCE_GROUP( haruna\\gl FILES ${HARUNA_TEST_HARUNA_GL_SRC_FILES} )
  SOURCE_GROUP( sora FILES ${HARUNA_TEST_SORA_SRC_FILES} )
  SOURCE_GROUP( support FILES ${HARUNA_TEST_SUPPORT_SRC_FILES} )

ENDFUNCTION( ADD_HARUNA_TEST )


ADD_HARUNA_LIBRARY()


IF( ${CMAKE_CURRENT_LIST_DIR} STREQUAL ${CMAKE_SOURCE_DIR} )

  ADD_HARUNA_EXE()
  ADD_HARUNA_TEST()
  
ENDIF()

